---
description: 
globs: 
alwaysApply: true
---
### 1. **ディレクトリ構造の基本方針**
- **環境*: docker環境でbackend、frontendが動作しています。それを踏まえた上で提案をしてください。

### 2. コーディング規約
- インデントは2スペースに統一
- 関数・変数名は意味がわかる命名を心がける
- コメントは日本語で記述可（複雑なロジックには必ずコメントを付ける）

## フロントエンド
- コンポーネントは機能ごとに分割する
- props型は明示的に定義する
- CSS は Tailwind CSS を優先して使用
- 状態管理は React Hooks（useState, useContext）を基本とする
- Feature-Based Architecture のデザインパターンを利用した実装(featureファイルを利用)

## Feature-Based Architecture ディレクトリ構造
- 新しい機能を作成する際は、必ず features/[機能名]/ 配下に以下の4つのディレクトリを作成する：
  - api/ - API呼び出し関数とエンドポイント定義
  - components/ - その機能専用のReactコンポーネント
  -`hooks/ - その機能専用のカスタムhooks
  - types/ - その機能専用のTypeScript型定義
- 各featureディレクトリには index.ts ファイルを作成してpublic APIを定義する
- 機能間の依存は features/[機能名]/index.ts を通してのみ行う
- 共通で使用するコンポーネント・hooks・utils・typesは src/[機能名]/ 配下に配置する


## バックエンド
- 構造体やメソッドの命名はキャメルケースを使用
- エラー処理は常に行い、適切なHTTPステータスコードを返す
- CSS は Tailwind CSS を優先して使用

### 3. API開発規約

## RESTful設計原則
- リソース指向の設計（名詞ベースのエンドポイント）
- 適切なHTTPメソッドの使用（GET/POST/PUT/DELETE）
- 一貫性のあるURL構造

## API仕様書
- OpenAPI/Swagger形式で記述
- APIを変更した場合は必ずopenapi.yamlも更新する
- サンプルリクエスト/レスポンスを具体的に記載

## エラーハンドリング
統一されたエラーレスポンス形式:

### 4. セキュリティガイドライン
- 環境変数や機密情報はコードに直接記述しない
- ユーザー入力は必ずバリデーション・サニタイズする
- APIエンドポイントには適切な認証・認可を実装
- 定期的にパッケージの脆弱性をチェック